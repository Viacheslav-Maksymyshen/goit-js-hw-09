{"mappings":"AAAA,MAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,iBAE1C,IAAIE,EAAa,EACbC,EAAY,EACZC,EAAc,EAUlBN,EAAKO,iBAAiB,UARtB,SAAsBC,GACpBA,EAAMC,iBACN,IAAIC,EAAeF,EAAMG,cAAcC,SACvCR,EAAaM,EAAaG,MAAMC,MAChCT,EAAYK,EAAaK,KAAKD,MAC9BR,EAAcI,EAAaM,OAAOF,SAgBpCX,EAAWI,iBAAiB,SAE5B,SAA2BU,EAAYC,EAAWC,IAblD,SAAuBC,EAAUP,GAC/B,MAAMQ,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,uBAAqBL,QAAiBP,QAE5Ca,EAAK,sBAAoBN,QAAiBP,YAQhDc,CAAcT,EAAWD,GACtBW,MAAK,EAACH,QAAEA,EAAOC,OAAEA,MAChBG,QAAQC,IAAI,uBAAqBL,QAAgBC,UAElDK,OAAM,EAACN,QAAEA,EAAOC,OAAEA,MACjBG,QAAQC,IAAI,sBAAoBL,QAAcC","sources":["src/js/03-promises.js"],"sourcesContent":["const form = document.querySelector('.form');\nconst sumbmitBtn = document.querySelector('[type=submit]');\n\nlet delayInput = 0;\nlet stepInput = 0;\nlet amountInput = 0;\n\nfunction readingInput(event) {\n  event.preventDefault();\n  let formElements = event.currentTarget.elements;\n  delayInput = formElements.delay.value;\n  stepInput = formElements.step.value;\n  amountInput = formElements.amount.value;\n}\n\nform.addEventListener('submit', readingInput);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms-`);\n    } else {\n      reject(`❌ Rejected promise ${position} in ${delay}ms-`);\n    }\n  });\n}\n\nsumbmitBtn.addEventListener('click', CallCreatePromise);\n\nfunction CallCreatePromise(delayInput, stepInput, amountInput) {\n  createPromise(stepInput, delayInput)\n    .then(({ resolve, reject }) => {\n      console.log(`✅ Fulfilled promise ${resolve} in ${reject}ms`);\n    })\n    .catch(({ resolve, reject }) => {\n      console.log(`❌ Rejected promise ${resolve} in ${reject}ms`);\n    });\n}\n\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const firstDelayInput = document.querySelector('[name=delay]');\n// const stepInput = document.querySelector('[name=step]');\n// const amountInput = document.querySelector('[name=amount]');\n// const formEl = document.querySelector('form');\n// const sumbmitBtn = document.querySelector('[type=submit]');\n\n// let firstDelayValue = 0;\n// let stepValue = 0;\n// let amountValue = 0;\n// // let isActiveInterval = false;\n\n// formEl.addEventListener('input', onFormInput);\n\n// function onFormInput(e) {\n//   firstDelayValue = firstDelayInput.value;\n//   stepValue = stepInput.value;\n//   amountValue = amountInput.value;\n// }\n\n// sumbmitBtn.addEventListener('click', onSubmitClick);\n\n// function onSubmitClick(e) {\n//   e.preventDefault();\n\n//   //   if (isActiveInterval) {\n//   //       return\n//   // };\n//   if (amountValue == 0 || amountValue < 0) {\n//     Notify.failure('Amount must be more then 0 and input must not be blank');\n//     return;\n//   }\n//   callCreatePromises(firstDelayValue, stepValue, amountValue);\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n\n//   return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       // resolve(`Fulfilled promise ${position} in ${Date.now() - delay}ms`)\n//       resolve(`Fulfilled promise ${position} in ${delay}ms`);\n//     } else {\n//       // reject(`Rejected promise ${position} in ${Date.now() - delay}ms`)\n//       reject(`Rejected promise ${position} in ${delay}ms`);\n//     }\n//   });\n// }\n\n// function callCreatePromises(firstDelay, step, amount) {\n//   let counter = 1;\n//   // const timeBefore = Date.now()\n\n//   let timing = Number(firstDelay);\n\n//   setTimeout(() => {\n//     // isActiveInterval = true;\n\n//     createPromise(counter, firstDelay)\n//       .then(resolve => {\n//         Notify.success(resolve);\n//         console.log(resolve);\n//       })\n//       .catch(error => {\n//         Notify.failure(error);\n//         console.log(error);\n//       });\n\n//     if (amount >= 2) {\n//       const timerId2 = setInterval(() => {\n//         counter += 1;\n//         timing += Number(step);\n\n//         if (counter > amount) {\n//           clearInterval(timerId2);\n//           return;\n//         }\n//         // createPromise(counter, timeBefore)\n//         createPromise(counter, timing)\n//           .then(resolve => {\n//             Notify.success(resolve);\n//             console.log(resolve);\n//           })\n//           .catch(error => {\n//             Notify.failure(error);\n//             console.log(error);\n//           });\n//       }, step);\n//     }\n//   }, firstDelay);\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$sumbmitBtn","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","addEventListener","event","preventDefault","formElements","currentTarget","elements","delay","value","step","amount","delayInput1","stepInput1","amountInput","position","shouldResolve","Math","random","Promise","resolve","reject","$47d4ff9957288465$var$createPromise","then","console","log","catch"],"version":3,"file":"03-promises.dc28ac25.js.map"}
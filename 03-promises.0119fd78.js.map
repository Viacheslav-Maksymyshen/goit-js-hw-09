{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAoBA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,uBAAqBN,QAAiBC,OAE5CM,EAAK,sBAAoBP,QAAeC,UAxBnCO,SAASC,cAAc,SAgB/BC,iBAAiB,UAdtB,SAAsBC,GACpBA,EAAMC,iBACN,IAAIC,EAAeF,EAAMG,cAAcC,SACnCC,EAAaC,OAAOJ,EAAaZ,MAAMiB,OACvCC,EAAYF,OAAOJ,EAAaO,KAAKF,OACrCG,EAAcJ,OAAOJ,EAAaS,OAAOJ,OAE1B,GAAfG,GAAoBA,EAAc,EACpCE,EAAA1B,GAAS2B,OAAOC,QAAQ,gCAmB5B,SAA2BT,EAAYG,EAAWE,GAChD,IAAIK,EAAQ,EACE,IAAVA,GAAeL,EAAc,GAC/BM,YAAW,KACT,IAAIC,EAAWF,GAAS,EACxB3B,EAAc2B,EAAOV,GAClBa,MAAKvB,IACJwB,QAAQC,IAAIzB,GACZiB,EAAA1B,GAAS2B,OAAOQ,QAAQ1B,MAEzB2B,OAAM1B,IACLuB,QAAQC,IAAIxB,GACZgB,EAAA1B,GAAS2B,OAAOC,QAAQlB,MAE5B2B,EAAoBN,KACnBZ,GAEL,SAASkB,EAAoBN,GAG3B,GAFAE,QAAQC,IAAIH,GACZE,QAAQC,IAAIV,GACRO,GAAW,GAAKP,GAAe,EAAG,CACpC,MAAMc,EAAUC,aAAY,KAE1BV,GAAS,EACT3B,EAAc2B,EAFdV,GAAcG,GAGXU,MAAKvB,IACJwB,QAAQC,IAAIzB,GACZiB,EAAA1B,GAAS2B,OAAOQ,QAAQ1B,MAEzB2B,OAAM1B,IACLuB,QAAQC,IAAIxB,GACZgB,EAAA1B,GAAS2B,OAAOC,QAAQlB,MAExBmB,GAASL,GACXgB,cAAcF,KAEfhB,KApDPmB,CAAkBtB,EAAYG,EAAWE","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nfunction readingInput(event) {\n  event.preventDefault();\n  let formElements = event.currentTarget.elements;\n  let delayInput = Number(formElements.delay.value);\n  let stepInput = Number(formElements.step.value);\n  let amountInput = Number(formElements.amount.value);\n\n  if (amountInput == 0 || amountInput < 0) {\n    Notiflix.Notify.failure('❌ Amount must be more then 0');\n    return;\n  }\n  CallCreatePromise(delayInput, stepInput, amountInput);\n}\n\nform.addEventListener('submit', readingInput);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  });\n}\n\nfunction CallCreatePromise(delayInput, stepInput, amountInput) {\n  let total = 0;\n  if (total === 0 && amountInput > 0) {\n    setTimeout(() => {\n      let caunter = (total += 1);\n      createPromise(total, delayInput)\n        .then(resolve => {\n          console.log(resolve);\n          Notiflix.Notify.success(resolve);\n        })\n        .catch(reject => {\n          console.log(reject);\n          Notiflix.Notify.failure(reject);\n        });\n      SecondCreatePromise(caunter);\n    }, delayInput);\n  }\n  function SecondCreatePromise(caunter) {\n    console.log(caunter);\n    console.log(amountInput);\n    if (caunter >= 1 && amountInput >= 2) {\n      const timerid = setInterval(() => {\n        delayInput += stepInput;\n        total += 1;\n        createPromise(total, delayInput)\n          .then(resolve => {\n            console.log(resolve);\n            Notiflix.Notify.success(resolve);\n          })\n          .catch(reject => {\n            console.log(reject);\n            Notiflix.Notify.failure(reject);\n          });\n        if (total >= amountInput) {\n          clearInterval(timerid);\n        }\n      }, stepInput);\n    }\n  }\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","document","querySelector","addEventListener","event","preventDefault","formElements","currentTarget","elements","delayInput","Number","value","stepInput","step","amountInput","amount","$parcel$interopDefault","Notify","failure","total","setTimeout","caunter","then","console","log","success","catch","SecondCreatePromise","timerid","setInterval","clearInterval","$47d4ff9957288465$var$CallCreatePromise"],"version":3,"file":"03-promises.0119fd78.js.map"}